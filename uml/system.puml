@startuml
!define STYLE bold

package "Server System" {
    class main {
        + int main()
    }

    class Server {
        + Server(int port = PORT)
        + ~Server()
        + bool init_server()
        + void start_server()
        + void send_message(const std::string& message, const int& client_id)
        + void broadcast_message(const std::string& message)
        + void handle_client(int client_socket, int client_number, struct sockaddr_in client_addr)
        --
        - int port
        - int server_fd
        - std::unordered_map<int, int> client_sockets;
        - std::mutex client_mutex
        - ServerController* controller;
        --
        - void server_input_thread()
        - void loop_new_clients()
    }

    class ServerController {
        + void parse_call(const std::string& message, int client_number)
        + void send_call(const std::string& message, int client_number)
        + void add_game(Game game)
        + void delete_game(int game_id)
        + std::vector<Game> game_list()
        + void update_player_status(int client_number, int status)
        + void add_player_to_game(int client_number, int id)
        --
        - Server* server;
        - std::unordered_map<int, std::unique_ptr<AbstractCommand>> command_registry_;
        - std::unordered_map<int, Game> current_games;
        - std::unordered_map<int, int> player_status; // Client_id to current game or -1 for not in game
        --
        - void initialize_commands();
    }

    class AbstractCommand {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class CmdAddGame {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class CmdListGames {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class CmdJoinGame {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class CmdMove {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class CmdExitGame {
        + void execute(const std::vector<int>& args, int client_number)
    }

    class Game {
        + Game(int number_of_players, int db_id, int board, int client_id, ServerController* controller_ptr, int with_bot)
        + int get_id()
        + int get_game_type()
        + int get_players()
        + int get_board()
        + void add_player(int client_id)
        + void remove_player(int client_id)
        + void end()
        + void move(int x1, int y1, int x2, int y2)
        + void move_bot()
        --
        - int id
        - int db_id
        - int game_type
        - int board_type
        - int with_bot
        - int number_of_bots
        - int move_id
        - std::vector<int> players
        - std::shared_ptr<Board> board_obj
        - std::vector<Bot> bots
        - ServerController* controller
    }

    class BoardFactory {
        + static std::shared_ptr<Board> create_board(int board_type, int size)
    }

    abstract class Board {
        + Board(int board_size)
        + virtual ~Board()
        + void fill_empty_space()
        + void fill_top_triangle(char x)
        + void fill_bottom_triangle(char x)
        + void fill_top_left(char x)
        + void fill_top_right(char x)
        + void fill_bot_left(char x)
        + void fill_bot_right(char x)
        + void setup_board(int num_players)
        + void move(int x1, int y1, int x2, int y2)
        + virtual bool check_legality() = 0
        + void showBoard()
        + void fill_hexagon()
        + virtual std::vector<std::pair<int,int>> possible_shifts(int x, int y) = 0
        + virtual std::vector<std::pair<int,int>> possible_jumps(int x, int y, int a, int b) = 0
        + virtual std::vector<std::pair<int, int>> possible_moves(int x, int y) = 0
        + char get_Field(int x, int y) const
        + void set_Field(int x, int y, char value)
        + int get_size() const
        + std::vector<std::vector<char>> getFields() const
        --
        - int size
        - std::vector<std::vector<char>> Fileds
    }

    class Standard_Board {
        + Standard_Board(int board_size)
        + bool check_legality() override
        + std::vector<std::pair<int,int>> possible_shifts(int x, int y)
        + std::vector<std::pair<int,int>> possible_jumps(int x, int y, int a, int b)
        + std::vector<std::pair<int, int>> possible_moves(int x, int y)
    }

    class Fast_Board {
        + Fast_Board(int board_size)
        + bool check_legality() override
        + std::vector<std::pair<int,int>> possible_shifts(int x, int y)
        + std::vector<std::pair<int,int>> possible_jumps(int x, int y, int a, int b)
        + std::vector<std::pair<int, int>> possible_moves(int x, int y)
    }

    class Bot {
        + Bot(std::shared_ptr<Board> board)
        + void set_color(int color_int)
        + void get_checkers()
        + void set_destination()
        + int get_distance(int x1, int y1)
        + void make_move()
        + int get_x1()
        + int get_y1()
        + int get_x2()
        + int get_y2()
        --
        - std::shared_ptr<Board> board
        - char color
        - std::vector<std::vector<int>> checkers
        - std::vector<std::pair<int, int>> destination
        - int x1, y1, x2, y2
    }

    class DbConnector {
        + DbConnector(std::string ip, std::string username, std::string password)
        + int insert_game(int players, int game_type)
        + void insert_move(int game, int move_id, int x1, int y1, int x2, int y2)
        + std::vector<int> get_game(const int& db_game_id)
        + std::vector<std::string> get_games()
        + std::vector<int> get_move(int game, int move_id)
        + std::unique_ptr<sql::ResultSet> request(const std::string& query, const std::vector<std::string>& params)
        + void execute(const std::string& query, const std::vector<std::string>& params)
        + int execute_insert(const std::string& query, const std::vector<std::string>& params)
        --
        - std::unique_ptr<sql::Connection> conn
        - std::string username
    }

    Board <|-down- Standard_Board
    Board <|-down- Fast_Board
    Game --> Board : contains
    Game --> Bot : manages
    Game --> ServerController : uses
    Game --> DbConnector : uses
    Bot --> Board : uses
    ServerController --> DbConnector : uses
    Game --> BoardFactory : uses
    BoardFactory --> Board : creates
}

main --> Server : creates and uses
Server --> ServerController : calls functions
ServerController --> Game : manages multiple games

CmdAddGame -right-> ServerController
CmdListGames -right-> ServerController
CmdJoinGame -right-> ServerController
CmdMove -right-> ServerController
CmdExitGame -right-> ServerController

ServerController --> AbstractCommand
CmdAddGame -|> AbstractCommand
CmdListGames -|> AbstractCommand
CmdJoinGame -|> AbstractCommand
CmdMove -|> AbstractCommand
CmdExitGame -|> AbstractCommand

@enduml